use serenity::model::channel::Message;
use serenity::utils::MessageBuilder;

pub mod parsing {
    use super::*;

    pub fn inp_parser(msg: &Message, activator: &str) -> bool {
        //WE need to process the input to make sure it can be processed
        let elements: Vec<&str> = msg.content.trim().split(' ').collect();
        if activator == "!start" && elements.len() == 5 && elements.contains(activator){
            true
        }else if elements.contains(activator){
            true
        }else{
            false
        }
    }


}

pub mod client_handler{

}


pub mod msg {
    use super::*;
    pub enum MessageType{
        Help,
        Start,
        Rest,
        Stop,
    }
    use MessageType::{Rest,Help,Start,Stop};
    pub fn message_builder(msg: &Message,msg_type: MessageType) -> String {
        let mut response = String::new();
        let time = msg.timestamp.to_string();
        match msg_type{
            Help => {
                response =  MessageBuilder::new()
                    .push_bold_line("How to use")
                    .push_bold_line("Time measurement is in minutes")
                    .push_mono_line("!start focus time | rest time | long rest time | number of sessions")
                    .push_mono_line("!start 30 5 60 4")
                    .push_italic_line("-30 is focus minutes/learning time  -5 is rest/break minutes")
                    .push_italic_line("-60 is the long rest/break minutes- 4 is the number of rounds/session")
                    .build();
            },
            Start => {
                response = MessageBuilder::new()
                .push_bold("Pomodoro started @ ")
                .push_bold( time)
                .build(); 
            },
            Rest => {
                response = MessageBuilder::new()
                .push_bold("Pomodoro rest @ ")
                .push_bold( time)
                .build(); 
            },
            Stop => {
                response = MessageBuilder::new()
                .push_bold("Pomodoro stopped @ ")
                .push_bold( time)
                .build();
            },
        }
        response
    }
}
